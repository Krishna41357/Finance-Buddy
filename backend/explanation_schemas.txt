Complete explanation of all schemas in easy language, line by line:

1. Article.js Schema:
- type: This tells if the article is a 'blog' or 'news'.
- title: The title or headline of the article.
- url: The web link where the article is originally found.
- summary: A short summary of the article, sometimes generated by GPT.
- content: The full text content of the article.
- label: The category or topic of the article, like 'Banking' or 'Crypto'.
-featuredImg : The article thumbnail image will be stored here
- source: The website or source where the article was scraped from.
- scrapedAt: The date and time when the article was collected.

2. User.js Schema:
- username: The name chosen by the user.
- email: The user's email address, which must be unique.
- password: The user's password (stored securely).
- googleId: An optional ID if the user logs in with Google.
- photo: URL to the user's profile picture.
- role: The user's role, like 'user' or 'admin'.
- preferences: An array of topics the user is interested in, e.g., ['Banking', 'Crypto'].

3. Summary.js Schema:
- articleId: This field links the summary to a specific article in the Article collection. It ensures each summary corresponds to one article.
- summaryText: This contains the actual summarized text of the article, providing a concise version for quick reading.
- personalizedFor: This optional array holds references to User documents, indicating which users the summary is personalized for. It supports delivering customized summaries based on user preferences.
- generatedAt: This timestamp records when the summary was created, useful for tracking freshness and updates.

The Summary schema is essential because it separates summarized content from full articles, enabling efficient storage and retrieval of summaries. It also supports personalization and helps improve performance by avoiding repeated summarization.
